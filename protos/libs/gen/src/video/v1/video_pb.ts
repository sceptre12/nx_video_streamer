// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file src/video/v1/video.proto (package src.video.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message src.video.v1.VideoItem
 */
export class VideoItem extends Message<VideoItem> {
  /**
   * @generated from field: string video_id = 1;
   */
  videoId = "";

  /**
   * @generated from field: int32 start_time = 2;
   */
  startTime = 0;

  /**
   * @generated from field: optional int32 end_time = 3;
   */
  endTime?: number;

  /**
   * @generated from field: bool is_streaming = 4;
   */
  isStreaming = false;

  /**
   * @generated from field: optional string thumbnail_path = 5;
   */
  thumbnailPath?: string;

  /**
   * @generated from field: optional string video_path = 6;
   */
  videoPath?: string;

  constructor(data?: PartialMessage<VideoItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.VideoItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_time", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "is_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "thumbnail_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "video_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoItem {
    return new VideoItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoItem {
    return new VideoItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoItem {
    return new VideoItem().fromJsonString(jsonString, options);
  }

  static equals(a: VideoItem | PlainMessage<VideoItem> | undefined, b: VideoItem | PlainMessage<VideoItem> | undefined): boolean {
    return proto3.util.equals(VideoItem, a, b);
  }
}

/**
 * @generated from message src.video.v1.UpdateVideoStreamingStateRequest
 */
export class UpdateVideoStreamingStateRequest extends Message<UpdateVideoStreamingStateRequest> {
  /**
   * @generated from field: string video_id = 1;
   */
  videoId = "";

  /**
   * @generated from field: bool has_streaming_started = 2;
   */
  hasStreamingStarted = false;

  constructor(data?: PartialMessage<UpdateVideoStreamingStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.UpdateVideoStreamingStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "has_streaming_started", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateVideoStreamingStateRequest {
    return new UpdateVideoStreamingStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateVideoStreamingStateRequest {
    return new UpdateVideoStreamingStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateVideoStreamingStateRequest {
    return new UpdateVideoStreamingStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateVideoStreamingStateRequest | PlainMessage<UpdateVideoStreamingStateRequest> | undefined, b: UpdateVideoStreamingStateRequest | PlainMessage<UpdateVideoStreamingStateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateVideoStreamingStateRequest, a, b);
  }
}

/**
 * @generated from message src.video.v1.UpdateVideoStreamingStateResponse
 */
export class UpdateVideoStreamingStateResponse extends Message<UpdateVideoStreamingStateResponse> {
  /**
   * @generated from field: bool update_complete = 1;
   */
  updateComplete = false;

  constructor(data?: PartialMessage<UpdateVideoStreamingStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.UpdateVideoStreamingStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_complete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateVideoStreamingStateResponse {
    return new UpdateVideoStreamingStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateVideoStreamingStateResponse {
    return new UpdateVideoStreamingStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateVideoStreamingStateResponse {
    return new UpdateVideoStreamingStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateVideoStreamingStateResponse | PlainMessage<UpdateVideoStreamingStateResponse> | undefined, b: UpdateVideoStreamingStateResponse | PlainMessage<UpdateVideoStreamingStateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateVideoStreamingStateResponse, a, b);
  }
}

/**
 * https://protobuf.dev/programming-guides/proto3/#simple
 * Allows us to shape the message we want to send
 *
 * @generated from message src.video.v1.GetVideosRequest
 */
export class GetVideosRequest extends Message<GetVideosRequest> {
  /**
   * @generated from field: optional int32 limit_by = 1;
   */
  limitBy?: number;

  constructor(data?: PartialMessage<GetVideosRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.GetVideosRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit_by", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideosRequest {
    return new GetVideosRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideosRequest {
    return new GetVideosRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideosRequest {
    return new GetVideosRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideosRequest | PlainMessage<GetVideosRequest> | undefined, b: GetVideosRequest | PlainMessage<GetVideosRequest> | undefined): boolean {
    return proto3.util.equals(GetVideosRequest, a, b);
  }
}

/**
 * @generated from message src.video.v1.GetVideosResponse
 */
export class GetVideosResponse extends Message<GetVideosResponse> {
  /**
   * @generated from field: repeated src.video.v1.VideoItem results = 1;
   */
  results: VideoItem[] = [];

  constructor(data?: PartialMessage<GetVideosResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.GetVideosResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: VideoItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideosResponse {
    return new GetVideosResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideosResponse {
    return new GetVideosResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideosResponse {
    return new GetVideosResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideosResponse | PlainMessage<GetVideosResponse> | undefined, b: GetVideosResponse | PlainMessage<GetVideosResponse> | undefined): boolean {
    return proto3.util.equals(GetVideosResponse, a, b);
  }
}

/**
 * @generated from message src.video.v1.GetVideoRequest
 */
export class GetVideoRequest extends Message<GetVideoRequest> {
  /**
   * @generated from field: string video_id = 1;
   */
  videoId = "";

  constructor(data?: PartialMessage<GetVideoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.GetVideoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideoRequest {
    return new GetVideoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideoRequest {
    return new GetVideoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideoRequest {
    return new GetVideoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideoRequest | PlainMessage<GetVideoRequest> | undefined, b: GetVideoRequest | PlainMessage<GetVideoRequest> | undefined): boolean {
    return proto3.util.equals(GetVideoRequest, a, b);
  }
}

/**
 * @generated from message src.video.v1.GetVideoResponse
 */
export class GetVideoResponse extends Message<GetVideoResponse> {
  /**
   * @generated from field: string video_id = 1;
   */
  videoId = "";

  /**
   * @generated from field: int32 start_time = 2;
   */
  startTime = 0;

  /**
   * @generated from field: optional int32 end_time = 3;
   */
  endTime?: number;

  /**
   * @generated from field: bool is_streaming = 4;
   */
  isStreaming = false;

  /**
   * @generated from field: optional string thumbnail_path = 5;
   */
  thumbnailPath?: string;

  /**
   * @generated from field: optional string video_path = 6;
   */
  videoPath?: string;

  constructor(data?: PartialMessage<GetVideoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.GetVideoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_time", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "is_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "thumbnail_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "video_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVideoResponse {
    return new GetVideoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVideoResponse {
    return new GetVideoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVideoResponse {
    return new GetVideoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVideoResponse | PlainMessage<GetVideoResponse> | undefined, b: GetVideoResponse | PlainMessage<GetVideoResponse> | undefined): boolean {
    return proto3.util.equals(GetVideoResponse, a, b);
  }
}

/**
 * @generated from message src.video.v1.CreateVideoRequest
 */
export class CreateVideoRequest extends Message<CreateVideoRequest> {
  /**
   * @generated from field: string video_id = 1;
   */
  videoId = "";

  /**
   * @generated from field: int32 start_time = 2;
   */
  startTime = 0;

  constructor(data?: PartialMessage<CreateVideoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.CreateVideoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVideoRequest {
    return new CreateVideoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVideoRequest {
    return new CreateVideoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVideoRequest {
    return new CreateVideoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVideoRequest | PlainMessage<CreateVideoRequest> | undefined, b: CreateVideoRequest | PlainMessage<CreateVideoRequest> | undefined): boolean {
    return proto3.util.equals(CreateVideoRequest, a, b);
  }
}

/**
 * @generated from message src.video.v1.CreateVideoResponse
 */
export class CreateVideoResponse extends Message<CreateVideoResponse> {
  /**
   * @generated from field: src.video.v1.VideoItem results = 1;
   */
  results?: VideoItem;

  constructor(data?: PartialMessage<CreateVideoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.CreateVideoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: VideoItem },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVideoResponse {
    return new CreateVideoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVideoResponse {
    return new CreateVideoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVideoResponse {
    return new CreateVideoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVideoResponse | PlainMessage<CreateVideoResponse> | undefined, b: CreateVideoResponse | PlainMessage<CreateVideoResponse> | undefined): boolean {
    return proto3.util.equals(CreateVideoResponse, a, b);
  }
}

/**
 * Message to update the db to indicate the user has stopped streaming
 *
 * @generated from message src.video.v1.StopUploadStreamRequest
 */
export class StopUploadStreamRequest extends Message<StopUploadStreamRequest> {
  /**
   * @generated from field: string video_id = 1;
   */
  videoId = "";

  /**
   * @generated from field: int32 end_time = 2;
   */
  endTime = 0;

  constructor(data?: PartialMessage<StopUploadStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.StopUploadStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "end_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopUploadStreamRequest {
    return new StopUploadStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopUploadStreamRequest {
    return new StopUploadStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopUploadStreamRequest {
    return new StopUploadStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopUploadStreamRequest | PlainMessage<StopUploadStreamRequest> | undefined, b: StopUploadStreamRequest | PlainMessage<StopUploadStreamRequest> | undefined): boolean {
    return proto3.util.equals(StopUploadStreamRequest, a, b);
  }
}

/**
 * Response from the Db indicating if the update was a success or not
 *
 * @generated from message src.video.v1.StopUploadStreamResponse
 */
export class StopUploadStreamResponse extends Message<StopUploadStreamResponse> {
  /**
   * @generated from field: bool has_ended = 1;
   */
  hasEnded = false;

  constructor(data?: PartialMessage<StopUploadStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.StopUploadStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_ended", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopUploadStreamResponse {
    return new StopUploadStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopUploadStreamResponse {
    return new StopUploadStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopUploadStreamResponse {
    return new StopUploadStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopUploadStreamResponse | PlainMessage<StopUploadStreamResponse> | undefined, b: StopUploadStreamResponse | PlainMessage<StopUploadStreamResponse> | undefined): boolean {
    return proto3.util.equals(StopUploadStreamResponse, a, b);
  }
}

/**
 * This is used to send a request to start streaming the video
 *
 * @generated from message src.video.v1.StartVideoStreamRequest
 */
export class StartVideoStreamRequest extends Message<StartVideoStreamRequest> {
  /**
   * @generated from field: string video_id = 1;
   */
  videoId = "";

  constructor(data?: PartialMessage<StartVideoStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.StartVideoStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartVideoStreamRequest {
    return new StartVideoStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartVideoStreamRequest {
    return new StartVideoStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartVideoStreamRequest {
    return new StartVideoStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartVideoStreamRequest | PlainMessage<StartVideoStreamRequest> | undefined, b: StartVideoStreamRequest | PlainMessage<StartVideoStreamRequest> | undefined): boolean {
    return proto3.util.equals(StartVideoStreamRequest, a, b);
  }
}

/**
 * Not sure what should be returned atm
 *
 * @generated from message src.video.v1.StartVideoStreamResponse
 */
export class StartVideoStreamResponse extends Message<StartVideoStreamResponse> {
  constructor(data?: PartialMessage<StartVideoStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "src.video.v1.StartVideoStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartVideoStreamResponse {
    return new StartVideoStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartVideoStreamResponse {
    return new StartVideoStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartVideoStreamResponse {
    return new StartVideoStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartVideoStreamResponse | PlainMessage<StartVideoStreamResponse> | undefined, b: StartVideoStreamResponse | PlainMessage<StartVideoStreamResponse> | undefined): boolean {
    return proto3.util.equals(StartVideoStreamResponse, a, b);
  }
}

